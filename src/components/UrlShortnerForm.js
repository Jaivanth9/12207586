import React, { useState } from "react";
import {
  Box,
  Button,
  Card,
  CardContent,
  Grid,
  TextField,
  Typography,
  Snackbar
} from "@mui/material";
import { generateShortcode } from "../utils/shortcodeGenerator";
import { isValidUrl, isValidShortcode } from "../utils/validators";
import { log } from "../middleware/logger";

const UrlShortenerForm = () => {
  const [entries, setEntries] = useState([
    { longUrl: "", validity: "", customCode: "" },
  ]);
  const [shortenedUrls, setShortenedUrls] = useState([]);
  const [snackbar, setSnackbar] = useState("");

  const handleChange = (index, field, value) => {
    const newEntries = [...entries];
    newEntries[index][field] = value;
    setEntries(newEntries);
  };

  const handleAdd = () => {
    if (entries.length < 5) {
      setEntries([...entries, { longUrl: "", validity: "", customCode: "" }]);
    }
  };

  const handleShorten = () => {
    const mappings = JSON.parse(localStorage.getItem("urlMappings") || "{}");
    const newUrls = [];

    for (let i = 0; i < entries.length; i++) {
      const { longUrl, validity, customCode } = entries[i];

      if (!isValidUrl(longUrl)) {
        setSnackbar(`Entry ${i + 1}: Invalid URL`);
        log("validation", "Invalid URL", { longUrl });
        return;
      }

      let code = customCode || generateShortcode();
      if (customCode) {
        if (!isValidShortcode(customCode)) {
          setSnackbar(`Entry ${i + 1}: Invalid custom shortcode`);
          log("validation", "Invalid custom shortcode", { customCode });
          return;
        }
        if (mappings[customCode]) {
          setSnackbar(`Entry ${i + 1}: Custom shortcode already in use`);
          log("collision", "Shortcode already in use", { customCode });
          return;
        }
      }

      // Ensure autogenerated code is unique
      while (mappings[code]) {
        code = generateShortcode();
      }

      const createdAt = new Date();
      const expiryDate = new Date(createdAt.getTime() + (validity ? parseInt(validity) : 30) * 60000);

      mappings[code] = {
        originalUrl: longUrl,
        createdAt: createdAt.toISOString(),
        expiry: expiryDate.toISOString()
      };

      newUrls.push({
        code,
        longUrl,
        expiry: expiryDate.toLocaleString()
      });

      log("shorten", "URL shortened", { code, longUrl });
    }

    localStorage.setItem("urlMappings", JSON.stringify(mappings));
    setShortenedUrls(newUrls);
    setSnackbar("URLs shortened successfully!");
  };

  return (
    <Box p={4}>
      <Typography variant="h4" gutterBottom>
        URL Shortener
      </Typography>

      {entries.map((entry, index) => (
        <Card key={index} sx={{ mb: 2 }}>
          <CardContent>
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6}>
                <TextField
                  label="Original URL"
                  fullWidth
                  value={entry.longUrl}
                  onChange={(e) => handleChange(index, "longUrl", e.target.value)}
                />
              </Grid>
              <Grid item xs={12} sm={3}>
                <TextField
                  label="Validity (min)"
                  type="number"
                  fullWidth
                  value={entry.validity}
                  onChange={(e) => handleChange(index, "validity", e.target.value)}
                />
              </Grid>
              <Grid item xs={12} sm={3}>
                <TextField
                  label="Custom Shortcode (optional)"
                  fullWidth
                  value={entry.customCode}
                  onChange={(e) => handleChange(index, "customCode", e.target.value)}
                />
              </Grid>
            </Grid>
          </CardContent>
        </Card>
      ))}

      <Box display="flex" gap={2}>
        <Button
          variant="contained"
          onClick={handleShorten}
          disabled={entries.length === 0}
        >
          Shorten URLs
        </Button>
        <Button
          variant="outlined"
          onClick={handleAdd}
          disabled={entries.length >= 5}
        >
          Add Another URL
        </Button>
      </Box>

      {shortenedUrls.length > 0 && (
        <Box mt={4}>
          <Typography variant="h6" gutterBottom>
            Shortened URLs
          </Typography>
          {shortenedUrls.map(({ code, longUrl, expiry }) => (
            <Card key={code} sx={{ mb: 1 }}>
              <CardContent>
                <Typography><strong>Short URL:</strong> <a href={`/${code}`} target="_blank" rel="noreferrer">{`http://localhost:3000/${code}`}</a></Typography>
                <Typography><strong>Original:</strong> {longUrl}</Typography>
                <Typography><strong>Expires:</strong> {expiry}</Typography>
              </CardContent>
            </Card>
          ))}
        </Box>
      )}

      <Snackbar
        open={!!snackbar}
        autoHideDuration={4000}
        onClose={() => setSnackbar("")}
        message={snackbar}
      />
    </Box>
  );
};

export default UrlShortenerForm;
